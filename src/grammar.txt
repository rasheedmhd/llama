breakfast       → protein "with" breakfast "on the side" ;
breakfast       → protein ;
breakfast       → bread ;
protein         → crispiness "crispy" "bacon" ;
protein         → "sausage" ;
protein         → cooked "eggs" ;
crispiness      → "really" ;
crispiness      → "really" crispiness ;
cooked          → "scrambled" ;
cooked          → "poached" ;
cooked          → "fried" ;

bread           → "toast" ;
bread           → "biscuits" ;
bread           → "English muffin" ;

ENHANCING NOTATION
ADDITIONAL |
bread           → "toast" | "biscuits" | "English muffin" ;

GROUPING ()
protein         → ( "scrambled" | "poached" | "fried" ) eggs ;

RECURSION (KEENE STAR) *
crispiness      → "really" "really"* ;

AT MOST +
crispiness      → "really"+ ;

OPTION ?
breakfast       → protein ( "with" breakfast "on the side" )?;

breakfast       → protein ( "with" breakfast "on the side" )?
                | bread ;

protein         → "really"+ "crispy" "bacon"
                | "sausage"
                | ( "scrambled" | "poached" | "fried" ) "eggs";

bread           → "toast" | "biscuits" | "English muffin" ;

EVALUATING EXPRESSIONS
expression → literal
            | unary
            | binary
            | grouping ;

literal     → NUMBER | STRING | "true" | "false" | "nil" ;

grouping    → "(" expression ")" ;

unary       → ( "-" | "!" ) expression ;

binary      → expression operator expression ;

operator    → "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/" ;

DISAMBIGUATING GRAMMAR

The top expression rule matches any expression at any precedence
level. Since equality has the lowest precedence, if we match that, then it
covers everything.

expression → equality

primary    → NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;

Unary operators can nest — !!true is a valid if weird expression — the operand
can itself be a unary operator. A recursive rule handles that nicely.
unary → ( "!" | "-" ) unary | primary;

factor → unary ( ( "/" | "*" ) unary )* ;

expression      → equality ;
equality        → comparison ( ( "!=" | "==" ) comparison )* ;
comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term            → factor ( ( "-" | "+" ) factor )* ;
factor          → unary ( ( "/" | "*" ) unary )* ;
unary           → ( "!" | "-" ) unary | primary ;
primary         → NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;


(1) pick a non-terminal symbol, α, in the prototype string;
(2) choose a grammar rule, α → β; and
(3) rewrite α with β.

Ambiguity
Stmt     → if Expr then Stmt
         | if Expr then Stmt else Stmt
         | Other


FIXING Ambiguity
Stmt     → if Expr then Stmt
         | if Expr then WithElse else Stmt
         | Other

WithElse → if Expr then WithElse else WithElse
         | Other